// Services/claude/core/naturalResponder.js
const { Anthropic } = require('@anthropic-ai/sdk');

class NaturalResponder {
  constructor() {
    this.anthropic = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY,
    });

    // Configuration du mode
    this.config = {
      conciseMode: true
    };

    this.systemPrompt = `Tu es l'assistant JoyJuice, avec acc√®s direct au cache contenant :
- Clients (d√©tails, zones, ...)
- Produits (noms, prix, ...)
- D√©tail des Livraisons (quantit√©s, produits, clients, zones, ...) 
Tu aides le livreur √† :
- Obtenir les informations clients depuis la base de donn√©es
- Cr√©er et modifier les livraisons
- R√©pondre aux questions du livreurs depuis les donn√©es existantes dans la base de donn√©es.

Formats de r√©ponse :
1. Livraison : "Bon L00XX enregistr√© : [quantit√©] [produit] pour [client] ([zone])"
2. Client ambigu : "[client] pr√©sent dans : [zone1], [zone2]"
3. Erreur : "[probl√®me]. [solution]"

R√®gles :
1. R√©ponses courtes et directes
2. Inclure zone client si disponible
3. Pr√©cision demand√©e si info manquante
4. Suggestions uniquement si utiles
5. Pas de r√©p√©tition d'infos d√©j√† connues`;
}

async generateResponse(analysis, result) {
  try {
    console.log('üí¨ Analyse message:', {
      type: analysis?.type,
      status: result?.status,
      client: result?.client?.Nom_Client
    });

    // Validate input
    if (!analysis || !result) {
      throw new Error('Param√®tres invalides');
    }

    // Handle errors
    if (result.status === 'ERROR') {
      const errorMsg = result.error?.message || 'Erreur technique';
      console.error('‚ùå Erreur:', errorMsg);
      return {
        message: `D√©sol√©, je ne peux pas traiter cette demande: ${errorMsg}`,
        suggestions: ["R√©essayer", "Reformuler la demande"],
        error: true
      };
    }

    if (analysis.type === 'DEMANDE_INFO' && result.status === 'SUCCESS') {
      console.log('‚ÑπÔ∏è [generateResponse] Demande d\'informations d√©tect√©e.');

      const client = result.client;
      const champsDemandes = analysis.intention_details.champs || [];
      const reponses = [];

      champsDemandes.forEach(champ => {
        if (champ === 'adresse' && client?.Adresse) {
          reponses.push(`Adresse : ${client.Adresse}`);
        }
        if (champ === 'tel' && client?.Tel) {
          reponses.push(`T√©l√©phone : ${client.Tel}`);
        }
        if (champ === 'solde' && client?.Solde) {
          reponses.push(`Solde : ${client.Solde}`);
        }
      });

      if (reponses.length > 0) {
        return {
          message: `Voici les informations demand√©es pour ${client.Nom_Client} :\n\n${reponses.join('\n')}`,
          suggestions: ["Voir plus d'informations", "Cr√©er une livraison"]
        };
      }

      return {
        message: `Je n'ai pas trouv√© les informations demand√©es pour ${client.Nom_Client || "le client"}.\nPouvez-vous reformuler ?`,
        suggestions: ["R√©essayer avec d'autres informations"]
      };
    }

    console.log('üìù Passage au mod√®le Claude pour un traitement plus libre.');
    const prompt = this.buildPromptFromResults(analysis, result);

    const response = await this.anthropic.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 1024,
      messages: [{
        role: 'user',
        content: prompt
      }],
      system: this.systemPrompt
    });

    if (!response?.content?.[0]?.text) {
      console.error('‚ùå R√©ponse invalide de Claude.');
      throw new Error('R√©ponse invalide.');
    }

    console.log('‚úÖ R√©ponse g√©n√©r√©e avec succ√®s :', response.content[0].text);
    return {
      message: response.content[0].text,
      suggestions: []
    };

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', {
      message: error.message,
      stack: error.stack 
    });
    
    return {
      message: "Une erreur est survenue, veuillez r√©essayer.",
      suggestions: ["Reformuler", "Contacter le support"],
      error: true
    };
  }
}

buildPromptFromResults(analysis, result) {
  try {
    console.log('üí¨ [buildPromptFromResults] D√©but de la construction du prompt.');
    
    // Initialisation du prompt avec le contexte de base
    let prompt = 'Contexte :';

    // Ajout du type d'intention
    if (analysis.type) {
      prompt += `\nType d'intention: ${analysis.type}`;
      console.log(`üîç [buildPromptFromResults] Type d'intention d√©tect√© : ${analysis.type}`);
    }

    // Ajout des informations client si disponibles
    if (result.client) {
      const clientInfo = `${result.client.Nom_Client} (${result.client.Zone || 'zone non sp√©cifi√©e'})`;
      prompt += `\nClient: ${clientInfo}`;
      console.log(`üîç [buildPromptFromResults] Informations client ajout√©es : ${clientInfo}`);
    }

    // Ajout du statut du r√©sultat
    prompt += `\nR√©sultat: ${result.status || 'non sp√©cifi√©'}`;
    console.log(`üîç [buildPromptFromResults] Statut du r√©sultat : ${result.status || 'non sp√©cifi√©'}`);

    // Ajout du message du r√©sultat si disponible
    if (result.message) {
      prompt += `\nMessage: ${result.message}`;
      console.log(`üîç [buildPromptFromResults] Message du r√©sultat : ${result.message}`);
    }

    // Ajout des champs demand√©s si disponibles
    if (analysis.intention_details?.champs?.length > 0) {
      const champsDemandes = analysis.intention_details.champs.join(', ');
      prompt += `\nChamps demand√©s : ${champsDemandes}`;
      console.log(`üîç [buildPromptFromResults] Champs demand√©s ajout√©s : ${champsDemandes}`);
    }

    // Ajout des actions possibles si disponibles
    if (result.nextActions?.available) {
      const actionsPossibles = result.nextActions.available.join(', ');
      prompt += `\nActions possibles: ${actionsPossibles}`;
      console.log(`üîç [buildPromptFromResults] Actions possibles ajout√©es : ${actionsPossibles}`);
    }

    // Finalisation et retour du prompt
    console.log('‚úÖ [buildPromptFromResults] Prompt construit avec succ√®s :', prompt);
    return prompt;
  } catch (error) {
    console.error('‚ùå [buildPromptFromResults] Erreur lors de la construction du prompt :', error.message);
    throw error; // Relance l'erreur pour un traitement ult√©rieur
  }
}

enrichResponse(message, analysis, result) {
  try {
    console.log('üí¨ [enrichResponse] D√©but de l\'enrichissement de la r√©ponse.');
    console.log('üîç [enrichResponse] Message brut re√ßu :', message);
    console.log('üîç [enrichResponse] Analysis:', analysis);
    console.log('üîç [enrichResponse] Result:', result);

    const response = {
      message: message,
      suggestions: []
    };

    // Ajout des suggestions si disponibles
    if (result.nextActions?.available) {
      response.suggestions = result.nextActions.available;
      console.log('‚úÖ [enrichResponse] Suggestions ajout√©es :', result.nextActions.available);
    }

    // Gestion des clarifications si n√©cessaire
    if (result.status === 'needs_clarification' && result.zones) {
      response.message = `Client ambigu : "${result.client?.Nom_Client || 'Client'} pr√©sent dans : ${result.zones.join(', ')}"`;
      response.suggestions = ['Pr√©ciser la zone'];
      console.log('‚ö†Ô∏è [enrichResponse] Clarification n√©cessaire pour les zones :', result.zones);
      return response;
    }

    // G√©n√©ration dynamique de la r√©ponse pour les demandes d'informations client
    if (analysis.type === 'DEMANDE_INFO' && analysis.intention_details.type_info === 'INFO_CLIENT') {
      console.log('üîç [enrichResponse] Demande d\'information client d√©tect√©e.');

      const client = result.client || {};
      const champsDemandes = analysis.intention_details.champs || [];
      const availableFields = Object.keys(client).filter(key => client[key] !== undefined && client[key] !== 'NA');
      const enrichedMessages = [];

      console.log('üîç [enrichResponse] Champs disponibles pour le client :', availableFields);
      console.log('üîç [enrichResponse] Champs demand√©s :', champsDemandes);

      // Parcours des champs demand√©s pour g√©n√©rer la r√©ponse
      champsDemandes.forEach(champ => {
        if (availableFields.includes(champ)) {
          const champValue = client[champ];
          enrichedMessages.push(`Le champ "${champ}" pour ${client.Nom_Client || 'ce client'} est : ${champValue}.`);
          console.log(`‚úÖ [enrichResponse] Champ "${champ}" ajout√© √† la r√©ponse :`, champValue);
        } else {
          console.warn(`‚ö†Ô∏è [enrichResponse] Champ "${champ}" non disponible pour ce client.`);
        }
      });

      // Si aucun champ sp√©cifique demand√©, fournir un r√©sum√© des informations disponibles
      if (champsDemandes.length === 0) {
        const resume = availableFields.map(field => `${field} : ${client[field]}`).join('\n');
        response.message = `Voici les informations disponibles pour ${client.Nom_Client || 'ce client'} :\n${resume}`;
        console.log('‚úÖ [enrichResponse] R√©sum√© des informations client :', resume);
      } else if (enrichedMessages.length > 0) {
        response.message = enrichedMessages.join('\n');
        console.log('‚úÖ [enrichResponse] R√©ponse enrichie g√©n√©r√©e :', response.message);
      } else {
        response.message = `Je n'ai pas trouv√© les informations demand√©es (${champsDemandes.join(', ')}) pour ${client.Nom_Client || 'ce client'}.`;
        console.log('‚ö†Ô∏è [enrichResponse] Aucune information trouv√©e pour les champs demand√©s.');
      }
    }

    console.log('‚úÖ [enrichResponse] R√©ponse finale enrichie :', response);
    return response;
  } catch (error) {
    console.error('‚ùå [enrichResponse] Erreur durant l\'enrichissement de la r√©ponse :', error);
    return {
      message: "D√©sol√©, une erreur est survenue lors de l'enrichissement de la r√©ponse.",
      suggestions: ["R√©essayer"],
      error: true
    };
  }
}
}

module.exports = new NaturalResponder();
