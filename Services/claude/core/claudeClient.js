const { Anthropic } = require('@anthropic-ai/sdk');
const claudeConfig = require('../../../config/claudeConfig');

class ClaudeClient {
  static instance = null;

  constructor() {
    if (ClaudeClient.instance) {
      return ClaudeClient.instance;
    }

    try {
      this.config = claudeConfig;
      this.client = this.config.getClient();
      this.systemPrompts = {
        default: this.config.getSystemPrompt('conversation'),
        analysis: this.config.getSystemPrompt('analysis'),
        completion: this.config.getSystemPrompt('completion')
      };

      console.log('‚úÖ [claudeClient] Initialis√©');
      ClaudeClient.instance = this;
    } catch (error) {
      console.error('‚ùå [claudeClient] Erreur initialisation:', error);
      throw error;
    }
  }

  async call(content, type = 'default', options = {}) {
    try {
      const model = this.config.getModel(type);
      const systemPrompt = options.systemPrompt || this.systemPrompts[type] || this.systemPrompts.default;
      const maxTokens = this.config.getMaxTokens(type);

      console.log(`ü§ñ [claudeClient] Appel (${type}):`, {
        contentLength: content.length,
        model,
        maxTokens
      });

      console.log('üì§ [claudeClient] Message envoy√© :', content);
      console.log('üìú [claudeClient] Prompt syst√®me utilis√© :', systemPrompt);

      const response = await this.retryRequest(async () => {
        return await this.client.messages.create({
          model,
          max_tokens: maxTokens,
          temperature: options.temperature || 0,
          messages: [{
            role: 'user',
            content
          }],
          system: systemPrompt
        });
      });

      console.log('üìù [claudeClient] R√©ponse brute de Claude :', response);

      if (!response?.content?.[0]?.text) {
        console.error('‚ùå [claudeClient] R√©ponse invalide :', response);
        throw new Error('[claudeClient] R√©ponse invalide');
      }

      console.log('üîç [claudeClient] Tentative parsing JSON :', response.content[0].text);

      let parsedResponse;
      try {
        parsedResponse = JSON.parse(response.content[0].text);
      } catch (parseError) {
        console.error('‚ùå [claudeClient] Erreur parsing JSON :', parseError);
        console.error('‚ùå [claudeClient] R√©ponse brute ayant caus√© l\'erreur :', response.content[0].text);
        throw new Error('[claudeClient] √âchec parsing JSON');
      }

      console.log('‚úÖ [claudeClient] JSON pars√© avec succ√®s :', parsedResponse);

      return parsedResponse;

    } catch (error) {
      console.error('‚ùå [claudeClient] Erreur appel:', {
        type,
        error: error.message,
        stack: error.stack
      });
      throw error;
    }
  }

  async retryRequest(fn, maxRetries = 5, delay = 2000) {
    for (let i = 0; i < maxRetries; i++) {
      try {
        const result = await fn();
        if (!result) {
          throw new Error('R√©sultat vide re√ßu');
        }
        return result;
      } catch (error) {
        console.warn(`‚ö†Ô∏è [claudeClient] Tentative ${i + 1}/${maxRetries} √©chou√©e: ${error.message}`);
        if (i === maxRetries - 1) throw error;
        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i))); // Backoff exponentiel
      }
    }
  }

  static getInstance() {
    if (!ClaudeClient.instance) {
      ClaudeClient.instance = new ClaudeClient();
    }
    return ClaudeClient.instance;
  }
}

module.exports = ClaudeClient.getInstance();