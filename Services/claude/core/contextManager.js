/**
 * Gestionnaire de contexte pour les conversations et r√©solutions clients
 * D√©l√®gue la gestion du cache au CacheManager
 */
const NodeCache = require('node-cache');
const clientLookupService = require('../../clientLookupService');
const cacheManager = require('./cacheManager/cacheIndex');
const StringUtils = require('../utils/stringUtils');

class ContextManager {
    // Singleton instance
    static instance = null;
    
    // Cache uniquement pour les conversations actives
    // TTL de 30 minutes pour √©viter de garder des conversations inactives
    static conversationCache = new NodeCache({ 
        stdTTL: 30 * 60,
        checkperiod: 60 // V√©rification toutes les minutes
    });

    /**
     * Constructeur avec pattern Singleton
     * Garantit une seule instance du ContextManager
     */
    constructor() {
        if (!ContextManager.instance) {
            // Utiliser directement cacheStore
            this.cacheStore = require('./cacheManager/cacheStore');
            console.log('üîÑ ContextManager: Instance de cacheStore obtenue');
            ContextManager.instance = this;
        }
        return ContextManager.instance;
    }

    /**
     * Initialise le gestionnaire de contexte
     * S'assure que le cache principal est initialis√© via CacheManager
     */
    async initialize() {
        try {
            console.log('üöÄ Initialisation du ContextManager...');
            
            // V√©rifier si le cacheStore est disponible
            if (!this.cacheStore) {
                throw new Error('CacheStore non disponible pour ContextManager');
            }
            
            // Conservation uniquement du cache de conversation
            // qui est sp√©cifique au contexte utilisateur
            if (!ContextManager.conversationCache) {
                ContextManager.conversationCache = new NodeCache({ 
                    stdTTL: 30 * 60,
                    checkperiod: 60 
                });
                console.log('‚úÖ Cache de conversation initialis√©');
            }
            
            console.log('‚úÖ ContextManager initialis√©');
        } catch (error) {
            console.error('‚ùå Erreur initialisation ContextManager:', error);
            throw error;
        }
    }

    /**
     * R√©cup√®re le contexte de conversation pour un utilisateur
     * Cr√©e un nouveau contexte si aucun n'existe
     * @param {string} userId - Identifiant unique de l'utilisateur
     * @returns {Object} Contexte de conversation
     */
    async getConversationContext(userId) {
        try {
            let context = ContextManager.conversationCache.get(userId);
            
            if (!context) {
                // Cr√©ation d'un nouveau contexte avec valeurs par d√©faut
                context = {
                    lastClient: null,          // Dernier client s√©lectionn√©
                    lastDelivery: null,        // Derni√®re livraison trait√©e
                    recentProducts: new Set(), // Produits r√©cemment mentionn√©s
                    conversationStart: new Date().toISOString(),
                    lastUpdate: new Date().toISOString()
                };
                ContextManager.conversationCache.set(userId, context);
                console.log(`üìù Nouveau contexte cr√©√© pour l'utilisateur ${userId}`);
            }

            return context;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration contexte:', error);
            throw error;
        }
    }

    /**
     * Met √† jour le contexte de conversation d'un utilisateur
     * @param {string} userId - Identifiant unique de l'utilisateur
     * @param {Object} updates - Modifications √† apporter au contexte
     * @returns {Object} Contexte mis √† jour
     */
    async updateConversationContext(userId, updates) {
        try {
            const currentContext = await this.getConversationContext(userId);
            const updatedContext = { 
                ...currentContext, 
                ...updates,
                lastUpdate: new Date().toISOString()
            };
            
            console.log('üîÑ Mise √† jour contexte:', {
                userId,
                updates: Object.keys(updates)
            });

            ContextManager.conversationCache.set(userId, updatedContext);
            return updatedContext;
        } catch (error) {
            console.error('‚ùå Erreur mise √† jour contexte:', error);
            throw error;
        }
    }

    /**
     * R√©sout un client avec sa zone
     * G√®re les cas de clients multiples dans diff√©rentes zones
     * @param {string} clientName - Nom du client √† rechercher
     * @param {string} zone - Zone optionnelle pour pr√©ciser la recherche
     * @returns {Object} R√©sultat de la recherche avec statut
     */
    async resolveClientWithZone(clientName, zone = null) {
        try {
            console.log(`üîç R√©solution du client: ${clientName}${zone ? ` (zone: ${zone})` : ''}`);
            
            // Recherche du client via le service d√©di√©
            const result = await clientLookupService.findClientByNameAndZone(clientName, zone);
            
            // Cas 1: Client unique trouv√©
            if (result.status === 'single_match') {
                console.log('‚úÖ Client unique trouv√©:', result.client.Nom_Client);
                return result.client;
            }

            // Cas 2: Plusieurs clients possibles, besoin de pr√©ciser la zone
            if (result.status === 'multiple_matches') {
                console.log('‚ö†Ô∏è Plusieurs clients trouv√©s, n√©cessite pr√©cision zone');
                return {
                    status: 'NEED_ZONE',
                    message: result.message,
                    matches: result.matches,
                    availableZones: result.matches.map(m => m.zone || m.Zone).filter(Boolean)
                };
            }

            // Cas 3: Aucun client trouv√©
            console.log('‚ùå Client non trouv√©');
            return {
                status: 'NOT_FOUND',
                message: `Client "${clientName}" introuvable.`,
                searchedName: clientName,
                searchedZone: zone
            };

        } catch (error) {
            console.error('‚ùå Erreur r√©solution client:', error);
            throw error;
        }
    }

    /**
     * R√©cup√®re des statistiques sur l'√©tat du cache via CacheManager
     * M√©thode de diagnostic
     * @returns {Object} √âtat actuel du cache
     */
    static getCacheStatus() {
        return cacheManager.getCacheStatus();
    }

    /**
     * Nettoie le contexte d'un utilisateur
     * Utile quand une conversation est termin√©e
     * @param {string} userId - Identifiant de l'utilisateur
     */
    async clearUserContext(userId) {
        try {
            ContextManager.conversationCache.del(userId);
            console.log(`üßπ Contexte nettoy√© pour l'utilisateur ${userId}`);
        } catch (error) {
            console.error('‚ùå Erreur nettoyage contexte:', error);
            throw error;
        }
    }

    /**
     * V√©rifie si un utilisateur a un contexte actif
     * @param {string} userId - Identifiant de l'utilisateur
     * @returns {boolean} True si un contexte existe
     */
    hasActiveContext(userId) {
        return ContextManager.conversationCache.has(userId);
    }

    /**
     * R√©cup√®re des statistiques sur les contextes de conversation
     * Utile pour le monitoring
     * @returns {Object} Statistiques des contextes
     */
    getContextStats() {
        const stats = ContextManager.conversationCache.getStats();
        return {
            activeContexts: stats.keys,
            hits: stats.hits,
            misses: stats.misses,
            lastCheck: new Date().toISOString()
        };
    }
}

// Export de l'instance singleton et de la classe
module.exports = new ContextManager();
module.exports.ContextManager = ContextManager;